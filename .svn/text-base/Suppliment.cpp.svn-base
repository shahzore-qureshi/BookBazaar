#include "Suppliment.h"

Suppliment::Suppliment(string Uname, string Ucondition, int UsellType, string Useller, double UsellPrice, double UendPrice, string UCourseTag, int UCourseNumber, DateTime BookTime_Remaining, DateTime BookDate_Created, string suppOf) : Item(Uname, Ucondition, UsellType, Useller, UsellPrice, UendPrice, UCourseTag, UCourseNumber, BookTime_Remaining, BookDate_Created) 
{
	supplimentOf = suppOf;
}

string Suppliment::getSupplimentOf() {

	return supplimentOf;
	
}

void Suppliment::setSupplimentOf(string suppOf) {

	supplimentOf = suppOf;
	return;
	
}

string Suppliment::toFile() {

    stringstream output;
	output << "Suppliment" << "\",\"" << Item::toFile();
	output << "\",\"" << getSupplimentOf();
	
	return output.str();

}

istream & operator >> (istream& stream, Suppliment& aSuppliment)
{
    string input = "";
    
    cout << "Name: ";
    getline(stream, input);
    aSuppliment.setName(input);
    
    do
    {
        cout << "Course Tag: ";
        getline(stream, input);
    }while(input.length() > 3 || input.length() < 3);
    input[0] = toupper(input[0]);
    input[1] = toupper(input[1]);
    input[2] = toupper(input[2]);
    aSuppliment.setCourseTag(input);
    
    
    bool goodNum = false;
    int num = 0;
    while(!goodNum)
    {
        cout << "Course Number: ";
        try
        {
            cin >> num;
            aSuppliment.setCourseNumber(num);
            goodNum = true;
        }
        catch (exception e)
        {
            goodNum = false;
        }
    }
    cin.ignore(1);
    
    cout << "Condition: ";
    getline(stream, input);
    aSuppliment.setCondition(input);
    
    do
    {
        cout << "Auction/Trade/Sale: ";
        getline(stream, input);
    }while(input != "auction" && input != "trade" && input != "sale");
    for(int c = 0; c < input.length(); c++)
    {
        input[c] = tolower(input[c]);
    }
    if(input == "auction")
        aSuppliment.setSellType(0);
    else if(input == "sale")
        aSuppliment.setSellType(1);
    else if(input == "trade")
        aSuppliment.setSellType(2);
    
    cout << "Seller: ";
    getline(stream, input);
    aSuppliment.setSeller(input);
    
    goodNum = false;
    double price = 0.0;
    while(!goodNum)
    {
        cout << "Sell Price: ";
        try
        {
            cin >> price;
            aSuppliment.setSellPrice(price);
            goodNum = true;
        }
        catch (exception e)
        {
            goodNum = false;
        }
    }
    
    
    goodNum = false;
    price = 0.0;
    while(!goodNum)
    {
        cout << "End Price: ";
        try
        {
            cin >> price;
            aSuppliment.setEndPrice(price);
            goodNum = true;
        }
        catch (exception e)
        {
            goodNum = false;
        }
    }
    cin.ignore(1);
    
    goodNum = false;
    num = 0;
    while(!goodNum)
    {
        cout << "Number of Hours in Auction: ";
        try
        {
            cin >> num;
            DateTime timeRemain = DateTime(num, 0, 0, 0);
            goodNum = true;
        }
        catch (exception e)
        {
            goodNum = false;
        }
    }
    cin.ignore(1);
    
    cout << "Supplement of: ";
    getline(stream, input);
    aSuppliment.setSupplimentOf(input);
    
    return stream;
}

ostream & operator << (ostream& stream, Suppliment& aSuppliment)
{
    stream << aSuppliment.getName() << endl;
    stream << aSuppliment.getCondition() << endl;
    stream << aSuppliment.getSellType() << endl;
    stream << aSuppliment.getSeller() << endl;
    stream << aSuppliment.getSellPrice() << endl;
    stream << aSuppliment.getEndPrice() << endl;
    stream << aSuppliment.getCourseTag() << "-" << aSuppliment.getCourseNumber() << endl;
    stream << aSuppliment.getTimeRemaining() << endl;
    stream << aSuppliment.getDateCreated() << endl;
    stream << aSuppliment.getSupplimentOf();
    
    return stream;
}

bool Suppliment::compareTo(Suppliment rhs) {

	if ((name == rhs.name) && (condition == rhs.condition) && (sellType == rhs.sellType) && (seller == rhs.seller) && (sellPrice == rhs.sellPrice)
	&& (endPrice == rhs.endPrice) && (timeRemaining == rhs.timeRemaining) && (dateCreated == rhs.dateCreated) && (courseTag == rhs.courseTag)
	&& (supplimentOf == rhs.supplimentOf))
	return true;
	else
	return false;

}

