#include <iostream>
#include <fstream>
#include <sstream>
#include "Manual.h"
using namespace std;

Manual::Manual(string Uname, string Ucondition, int UsellType, string Useller, double UsellPrice, double UendPrice, string UCourseTag, int UCourseNumber, DateTime BookTime_Remaining, DateTime BookDate_Created, string suppOf, string publish, double isbn) : Item(Uname, Ucondition, UsellType, Useller, UsellPrice, UendPrice, UCourseTag, UCourseNumber, BookTime_Remaining, BookDate_Created) 
{

	supplimentOf = suppOf;
	publisher = publish;
	ISBN = isbn;

}

string Manual::getSupplimentOf() {

	return supplimentOf;

}

void Manual::setSupplimentOf(string suppOf) {

	supplimentOf = suppOf;
	return;

}

string Manual::getPublisher() {

	return publisher;

}

void Manual::setPublisher(string publish) {

	publisher = publish;
	return;

}

double Manual::getISBN() {

	return ISBN;

}

void Manual::setISBN(double isbn) {

	ISBN = isbn;
	return;

}

string Manual::toFile() {

    stringstream output;
	output << "Manual" << "\",\"" << Item::toFile();
	output << "\",\"" << getSupplimentOf() << "\",\"" << getPublisher() << "\",\"" << getISBN();
	
	return output.str();
}

istream & operator >> (istream& stream, Manual& aManual)
{
    string input = "";
    
    cout << "Name: ";
    getline(stream, input);
    aManual.setName(input);
    
    do
    {
        cout << "Course Tag: ";
        getline(stream, input);
    }while(input.length() > 3 || input.length() < 3);
    input[0] = toupper(input[0]);
    input[1] = toupper(input[1]);
    input[2] = toupper(input[2]);
    aManual.setCourseTag(input);
    
    
    bool goodNum = false;
    int num = 0;
    while(!goodNum)
    {
        cout << "Course Number: ";
        try
        {
            cin >> num;
            aManual.setCourseNumber(num);
            goodNum = true;
        }
        catch (exception e)
        {
            goodNum = false;
        }
    }
    cin.ignore(1);
    
    cout << "Condition: ";
    getline(stream, input);
    aManual.setCondition(input);
    
    do
    {
        cout << "Auction/Trade/Sale: ";
        getline(stream, input);
    }while(input != "auction" && input != "trade" && input != "sale");
    for(int c = 0; c < input.length(); c++)
    {
        input[c] = tolower(input[c]);
    }
    if(input == "auction")
        aManual.setSellType(0);
    else if(input == "sale")
        aManual.setSellType(1);
    else if(input == "trade")
        aManual.setSellType(2);
    
    cout << "Seller: ";
    getline(stream, input);
    aManual.setSeller(input);
    
    goodNum = false;
    double price = 0.0;
    while(!goodNum)
    {
        cout << "Sell Price: ";
        try
        {
            cin >> price;
            aManual.setSellPrice(price);
            goodNum = true;
        }
        catch (exception e)
        {
            goodNum = false;
        }
    }
    
    
    goodNum = false;
    price = 0.0;
    while(!goodNum)
    {
        cout << "End Price: ";
        try
        {
            cin >> price;
            aManual.setEndPrice(price);
            goodNum = true;
        }
        catch (exception e)
        {
            goodNum = false;
        }
    }
    cin.ignore(1);
    
    goodNum = false;
    num = 0;
    while(!goodNum)
    {
        cout << "Number of Hours in Auction: ";
        try
        {
            cin >> num;
            DateTime timeRemain = DateTime(num, 0, 0, 0);
            goodNum = true;
        }
        catch (exception e)
        {
            goodNum = false;
        }
    }
    cin.ignore(1);
    
    cout << "What does this Manual Go with? (Class Name/Class Textbook Name)" << endl;
    getline(stream, input);
    aManual.setSupplimentOf(input);
    
    cout << "Publisher: ";
    getline(stream, input);
    aManual.setPublisher(input);
    
    bool stop = false;
    do
    {
        cout << "Please enter the 13 digit ISBN number (\'r\' to return): ";
        getline(stream, input);
        if(input.length() == 1 && input[0] == 'r')
        {
            stop = true;
        }
    }while(input.length() != 13 && !stop);
    aManual.setISBN(atol(input.c_str()));
    
    return stream;
}
ostream & operator << (ostream& stream, Manual& aManual)
{
    
    stream << aManual.getName() << endl;
    stream << aManual.getCondition() << endl;
    stream << aManual.getSellType() << endl;
    stream << aManual.getSeller() << endl;
    stream << aManual.getSellPrice() << endl;
    stream << aManual.getEndPrice() << endl;
    stream << aManual.getCourseTag() << "-" << aManual.getCourseNumber() << endl;
    stream << aManual.getTimeRemaining() << endl;
    stream << aManual.getDateCreated() << endl;
    
    stream << aManual.getSupplimentOf() << endl;
    stream << aManual.getPublisher() << endl;
    stream << aManual.getISBN() << endl;
    
    return stream;
}

bool Manual::compareTo(Manual rhs) {

	if ((name == rhs.name) && (condition == rhs.condition) && (sellType == rhs.sellType) && (seller == rhs.seller) && (sellPrice == rhs.sellPrice)
	&& (endPrice == rhs.endPrice) && (timeRemaining == rhs.timeRemaining) && (dateCreated == rhs.dateCreated) && (courseTag == rhs.courseTag)
	&& (courseNumber == rhs.courseNumber) && (publisher == rhs.publisher) && (supplementOf == rhs.supplementOf) && (ISBN = rhs.ISBN))
	return true;
	else
	return false;

}
